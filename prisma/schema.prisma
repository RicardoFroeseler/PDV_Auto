// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//inicio da nossa estrutura de banco de dados
model Restaurant {
  id             String   @id @default(uuid())
  name           String
  description    String
  slug           String
  avatarImageUrl String
  coverImageUrl  String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  orders         Order[]
  products       Product[]
  menuCategories MenuCategory[]
}

model MenuCategory {
  id        String   @id @default(uuid())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete:Cascade) //Caso precise deletar algo ele ira deletar todos os vinculos das demais tabelas do banco
  restaurantId String

  products Product[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  slug        String
  description String
  price       Float
  imageUrl    String
  ingredients String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete:Cascade)
  restaurantId String

  menuCategory   MenuCategory @relation(fields: [menuCategoryId], references: [id], onDelete:Cascade)
  menuCategoryId String

  orderItems OrderItem[]
}

model Order {
  id                Int               @id @default(autoincrement())
  total             Float
  status            OrderStatus
  consumptionMethod ConsumptionMethod
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete:Cascade)
  restaurantId String

  orderItems OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id], onDelete:Cascade)
  productId String

  order   Order @relation(fields: [orderId], references: [id], onDelete:Cascade)
  orderId Int
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  READY
  FINISHED
  CANCELED
}

enum ConsumptionMethod {
  DINE_IN
  TAKEAWAY
  DELIVERY
}

//final da nossa estrutura de banco de dados
